commit 4ee7b8270e330d7dc26219549fea6c7bfd26b31d
Author: dmendes6 <dmendes6@>
Date:   Wed Apr 16 18:30:20 2025 -0600

    .

diff --git a/Makefile b/Makefile
index 48a2274..64b97cf 100644
--- a/Makefile
+++ b/Makefile
@@ -30,7 +30,10 @@ silotpcc.o: CPPFLAGS += -I$(SILO_DIR) -I$(SILO_DIR)/third-party/lz4
 spin-ix.o: CPPFLAGS += -I$(IX_DIR)/inc -I$(IX_DIR)/libix
 silotpcc-ix.o: CPPFLAGS += -I$(IX_DIR)/inc -I$(IX_DIR)/libix
 common-ix.o: CPPFLAGS += -I$(IX_DIR)/inc -I$(IX_DIR)/libix
-common-shenango.o: CPPFLAGS += $(INC) $(CXXFLAGS) -I$(ROOT_PATH)/bindings/cc
+common-shenango.o: CPPFLAGS += $(INC) $(CXXFLAGS) -I$(ROOT_PATH)/bindings/cc -I$(ROOT_PATH)/breakwater/inc -L$(ROOT_PATH)/breakwater -lbw
+
+## main references stuff that I only link/include in common-shenango.o
+## obviously I'm going to need to include it here too
 
 silotpcc-shenango: silotpcc-shenango.o common-shenango.o silotpcc.o $(SILO_OBJS)
 	$(CXX) -o $@ $^ $(LDFLAGS) ${SHENANGODIR}/shim/libshim.a -ldl $(RUNTIME_LIBS) $(ROOT_PATH)/bindings/cc/librt++.a -L$(SILO_DIR)/third-party/lz4 -llz4 -lnuma -ldb_cxx -pthread -ljemalloc
diff --git a/common-shenango.cc b/common-shenango.cc
index 7928917..5f64d3e 100644
--- a/common-shenango.cc
+++ b/common-shenango.cc
@@ -8,8 +8,19 @@ extern "C" {
 #include <runtime/storage.h>
 #include <runtime/preempt.h>
 #include "common.h"
+
+#include <breakwater/breakwater.h>
+#include <breakwater/dagor.h>
+#include <breakwater/seda.h>
+#include <breakwater/nocontrol.h>
+
 }
 
+#define RPC_STAT_PORT 8002
+#define RPC_STAT_MAGIC 0xDEADBEEF
+const struct crpc_ops *crpc_ops;
+const struct srpc_ops *srpc_ops;
+
 #include "net.h"
 #include "sync.h"
 #include "thread.h"
@@ -54,6 +65,9 @@ class RequestContext {
 };
 
 void HandleRequest(RequestContext *ctx) {
+
+  struct srpc_ctx *bw_ctx;
+
   uint64_t idx = -1;
   uint64_t before = rdtsc();
   bool vret = process_request_new(&idx);
@@ -69,10 +83,17 @@ void HandleRequest(RequestContext *ctx) {
   WARN_ON_ONCE(idx > 4);
 
   ctx->p.randomness = hton64(after);
+  /*
+  // (no longer?) todo! instead return result through writing to RPC context instead of the connection
   ssize_t ret = ctx->conn->WriteFull(&ctx->p, sizeof(ctx->p));
   if (ret != static_cast<ssize_t>(sizeof(ctx->p))) {
     if (ret != -EPIPE && ret != -ECONNRESET) log_err("tcp_write failed");
   }
+  */
+
+  bw_ctx->resp_len = sizeof(ctx->p);
+  memcpy(bw_ctx->resp_buf, &ctx->p, sizeof(ctx->p));
+
 }
 
 void ServerWorker(std::shared_ptr<rt::TcpConn> c) {
@@ -91,21 +112,54 @@ void ServerWorker(std::shared_ptr<rt::TcpConn> c) {
       delete ctx;
       return;
     }
-#define OUT_OF_ORDER_CONN 1
-#ifdef OUT_OF_ORDER_CONN
+
     rt::Thread([=] {
       HandleRequest(ctx);
       delete ctx;
-    })
-        .Detach();
+    }).Detach();
     ctx = new RequestContext(resp);
-#else
-    HandleRequest(ctx);
-#endif
+
   }
 }
 
+static void shenango_handler(struct srpc_ctx *bw_ctx)
+{
+
+  // todo! print bytes received just for the hello world setting
+  // still an open question what does it look like when a client closes the connection
+
+  if (unlikely(bw_ctx->req_len != sizeof(Payload))) {
+    log_err("got invalid RPC len %ld", bw_ctx->req_len);
+    return;
+  }
+  Payload *request_header = reinterpret_cast<Payload *>(bw_ctx->req_buf);
+
+
+  RequestContext *ctx; //= new RequestContext();
+  //ctx->p = request_header->p;
+
+  auto todo_work = [=] {
+    HandleRequest(ctx); //
+  };
+  rt::Thread(todo_work).Detach();
+}
+
 void MainHandler(void *arg) {
+
+
+  // cfgpagth and port aren't set in main - don't use them
+  crpc_ops = &cbw_ops;
+  srpc_ops = &sbw_ops;
+  int ret = srpc_ops->srpc_enable(shenango_handler);
+  if (ret) panic("couldn't enable RPC server");
+
+  for (;;); // make sure main program doesn't exit cause 
+  // what the correct thing would be... something w/ waitgroups
+
+  // rt::WaitGroup(1).Wait();
+  // from breakwater/netbench.cc
+
+
   std::unique_ptr<rt::TcpQueue> q(rt::TcpQueue::Listen({0, server_port}, 4096));
   if (q == nullptr) panic("couldn't listen for connections");
 
diff --git a/remake-silo.sh b/remake-silo.sh
new file mode 100755
index 0000000..2d8ad0b
--- /dev/null
+++ b/remake-silo.sh
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+set -e
+
+export SHENANGODIR=$(readlink -f $PWD/..)/caladan
+echo building SILO in $SHENANGODIR
+make
\ No newline at end of file
diff --git a/silotpcc-shenango.c b/silotpcc-shenango.c
index ea33014..881369e 100644
--- a/silotpcc-shenango.c
+++ b/silotpcc-shenango.c
@@ -184,6 +184,11 @@ int main(int argc, char *argv[])
 {
 	int port;
 
+
+	printf("SiloTPCC Shenango server\n");
+	return init_shenango((const char *)0, 0);
+	
+
 	if (argc < 5) {
 		usage(argv[0]);
 		return -1;
