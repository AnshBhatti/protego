commit c1301350f80f98b2c51578679a2f1af73ba39089
Author: abhatti <abhatti@>
Date:   Wed Apr 16 18:44:58 2025 -0600

    code comments + starting storage client

diff --git a/apps/storage_service/storage_client.cc b/apps/storage_service/storage_client.cc
new file mode 100644
index 0000000..b20306f
--- /dev/null
+++ b/apps/storage_service/storage_client.cc
@@ -0,0 +1,12 @@
+int StringToAddr(const char *str, uint32_t *addr) {
+  uint8_t a, b, c, d;
+
+  if (sscanf(str, "%hhu.%hhu.%hhu.%hhu", &a, &b, &c, &d) != 4) return -EINVAL;
+
+  *addr = MAKE_IP_ADDR(a, b, c, d);
+  return 0;
+}
+
+int main(int argc, char *argv[]) {
+  // usage: client [# threads/conns] 
+}
\ No newline at end of file
diff --git a/apps/storage_service/storage_server.cc b/apps/storage_service/storage_server.cc
index 6789b7b..f9e2bfe 100644
--- a/apps/storage_service/storage_server.cc
+++ b/apps/storage_service/storage_server.cc
@@ -138,7 +138,7 @@ class RequestContext {
   ~RequestContext() { free_buf(buf, bufsz); }
   binary_header_blk_t header;
   std::shared_ptr<SharedTcpStream> conn;
-  char *buf{nullptr};
+  char *buf{nullptr}; // Populated on write
   size_t bufsz{0};
 
   void *operator new(size_t size) {
@@ -153,7 +153,7 @@ class RequestContext {
 static void DoRequest(RequestContext *ctx, char *read_buf, char *compress_buf)
 {
   size_t input_length = ctx->header.lba_count * kSectorSize;
-  ssize_t ret = storage_read(read_buf, ctx->header.lba, ctx->header.lba_count);
+  ssize_t ret = storage_read(read_buf, ctx->header.lba, ctx->header.lba_count); // guess: LBA = Logical Block Address. Read lba_count blocks starting from lba
   if (unlikely(ret != 0)) {
     log_warn_ratelimited("storage ret: %ld", ret);
     return;
@@ -234,7 +234,7 @@ void HandleSetRequest(RequestContext *ctx) {
   }
 }
 
-void ServerWorker(std::shared_ptr<rt::TcpConn> c) {
+void ServerWorker(std::shared_ptr<rt::TcpConn> c) { // handles requests
   auto resp = std::make_shared<SharedTcpStream>(c);
   while (true) {
     /* allocate context */
